{"Information/API":{"title":"API","links":[],"tags":[],"content":"An API, or Application Programming Interface, is a set of rules and protocols that allows different software applications (or humans) to communicate with each other. It defines the methods and data formats that programs can use to request and exchange information.\nImagine you have two software applications: one that provides weather information and another that displays that information to users. The weather application has all the data about current weather conditions, forecasts, and so on, but it doesn’t know how to display that information to users. On the other hand, the display application knows how to present information to users but doesn’t have access to the weather data.\nHere’s where the API comes in: the weather application exposes an API that allows the display application to request weather information. This API defines the format of the requests the display application can make (like asking for the current temperature or a forecast for the next week) and the format of the responses it will receive.\nSo, when the display application needs weather information, it sends a request to the weather application’s API. The weather application processes the request, gathers the relevant data, and sends back a response containing the requested information. The display application then uses this information to update its interface and show the weather data to users.\nIn essence, an API acts as an intermediary that allows different software applications to work together by defining how they can interact with each other. It enables seamless communication and integration between disparate systems, facilitating the exchange of data and functionalities across various platforms and services.\nExample\nImagine you’re developing a weather app, and you want to include a feature that fetches the current weather for a given location. You can use a weather API to get this data.\nHere’s a sample API endpoint:\nGET api.weather.com/current\n\nIn this example:\n\nGET: This is the HTTP method used to retrieve data from the server.\napi.weather.com/current: This is the base URL of the weather API, combined with the endpoint for fetching current weather data.\n?location=NewYork: This is a query parameter specifying the location for which you want to get the weather. You can replace “NewYork” with any other location.\n&amp;apikey=your_api_key: This is another query parameter for authentication. You need to replace “your_api_key” with your actual API key obtained from the weather API provider.\n\nNow, let’s see how you would use this API endpoint in your code (assuming you’re using JavaScript with fetch API):\nconst apiKey = &#039;your_api_key&#039;;\nconst location = &#039;NewYork&#039;;\nconst apiUrl = `api.weather.com/current${location}&amp;apikey=${apiKey}`;\n \nfetch(apiUrl)\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    // Process the weather data returned by the API\n    console.log(data);\n  })\n  .catch(error =&gt; {\n    // Handle any errors that occur during the fetch\n    console.error(&#039;Error fetching weather data:&#039;, error);\n  });\nIn this code:\n\nWe construct the API URL by combining the base URL, location, and API key.\nWe use the fetch() function to make a GET request to the API endpoint.\nWe handle the response asynchronously using .then() method, converting it to JSON format.\nWe can then process the weather data returned by the API in the second .then() block.\nAny errors that occur during the fetch are caught and handled in the .catch() block.\n\nThis is a basic example of how you can use an API endpoint to fetch data in your application code."},"Information/ASCII":{"title":"ASCII","links":[],"tags":[],"content":"ASCII stands for American Standard Code for Information Interchange. It is a character encoding standard used to represent text in computers and communication equipment. ASCII encodes 128 characters into seven-bit integers, including letters, numbers, punctuation marks, and control characters.\nEach ASCII character has a unique numeric code ranging from 0 to 127. For example, the ASCII code for the letter ‘A’ is 65, and for the digit ‘0’ is 48. ASCII encoding is widely used in computer systems and communication protocols to standardize text-based data representation. It serves as a foundation for many other character encodings, including Unicode."},"Information/Base-16":{"title":"Base 16","links":[],"tags":[],"content":"Base-16, also known as hexadecimal (or hex), is a numerical system that uses 16 different symbols to represent values. These symbols include the digits 0-9 and the letters A-F, where A represents the value 10, B represents 11, and so on up to F, which represents 15. Hexadecimal notation is widely used in computing because it provides a concise and human-readable way to represent binary data.\nUsage and Examples\nHexadecimal notation is commonly used in various computing contexts, including:\n\n\nMemory Addressing: In computer memory, addresses are often represented in hexadecimal format. For example, a memory address might be expressed as 0x7FFF, where the prefix “0x” indicates that the value is in hexadecimal.\n\n\nColor Representation: Hexadecimal notation is used to represent colors in web design and graphics software. For instance, the color white is represented as #FFFFFF, where each pair of hexadecimal digits corresponds to the red, green, and blue components of the color.\n\n\nASCII Encoding: ASCII characters can be represented using their hexadecimal values. For example, the ASCII character ‘A’ has a hexadecimal value of 41, and ‘w’ has a value of 77. This allows for easy conversion between characters and their corresponding numerical values.\n\n\nASCII Characters in Hexadecimal\nIn ASCII encoding, each character is assigned a unique numerical value. For instance, the letter ‘A’ corresponds to the decimal value 65, which is equivalent to 41 in hexadecimal. Similarly, the letter ‘w’ corresponds to the decimal value 119, which is represented as 77 in hexadecimal. This allows ASCII characters to be conveniently represented and manipulated using hexadecimal notation in various programming contexts.\nHexadecimal notation provides a compact and intuitive way to work with binary data, making it indispensable in computer programming, digital electronics, and other fields. Its simplicity and versatility make it a fundamental concept in computing, essential for understanding and working with low-level data representations. If you’d like to explore further, here’s a resource with additional information on hexadecimal notation."},"Information/Base-64":{"title":"Base 64","links":[],"tags":[],"content":"\n\n                  \n                  Note\n                  \n                \nTaken from wikipedia: en.wikipedia.org/wiki/Base64\n\nIn computer programming, Base64 is a group of binary-to-text encoding schemes that transforms binary data into a sequence of printable characters, limited to a set of 64 unique characters. More specifically, the source binary data is taken 6 bits at a time, then this group of 6 bits is mapped to one of 64 unique characters.\nAs with all binary-to-text encoding schemes, Base64 is designed to carry data stored in binary formats across channels that only reliably support text content. Base64 is particularly prevalent on the World Wide Web[1] where one of its uses is the ability to embed image files or other binary assets inside textual assets such as HTML and CSS files.[2]\nBase64 is also widely used for sending e-mail attachments, because SMTP – in its original form – was designed to transport 7-bit ASCII characters only. Encoding an attachment as Base64 before sending, and then decoding when received, assures older SMTP servers will not interfere with the attachment.\nBase64 encoding causes an overhead of 33–37% relative to the size of the original binary data (33% by the encoding itself; up to 4% more by the inserted line breaks).\n"},"Information/Basic-Auth":{"title":"Basic Auth","links":[],"tags":[],"content":"HTTP Basic Authentication is a simple and widely used authentication mechanism in web development. It allows clients to access protected resources on a server by providing a username and password.\nHow It Works\nWhen a client attempts to access a protected resource, the server responds with a 401 Unauthorized status code along with a WWW-Authenticate header indicating that Basic Authentication is required. The client then includes an Authorization header in subsequent requests with the provided credentials.\nConstructing the Request\nTo provide the username and password in a request, follow these steps:\n\n\nConcatenate Credentials: Combine the username and password with a colon separator, e.g., username:password.\n\n\nBase64 Encode: Encode the concatenated string using Base64 encoding.\n\n\nInclude Authorization Header: Add an Authorization header to the request with the value Basic followed by the Base64-encoded string.\n\n\nExample Request\nHere’s an example HTTP request using cURL:\ncurl -X GET \\\n  -H &quot;Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=&quot; \\\n  example.com/protected/resource\nIn this example:\n\ndXNlcm5hbWU6cGFzc3dvcmQ= is the Base64-encoded string of username:password.\nexample.com/protected/resource is the URL of the protected resource.\n\nIntegration with API Testing Tools\nTools like Insomnia and Postman provide graphical user interfaces for interacting with APIs. They include features to easily provide username and password for HTTP Basic Authentication. Users can input their credentials directly into the tool’s interface, and the tool will automatically include them in the request headers when sending requests to the server. This simplifies the process of testing and interacting with authenticated APIs."},"Information/Caesar-cipher":{"title":"Caesar cipher","links":[],"tags":[],"content":"\nThe Caesar cipher is named after Julius Caesar, who, according to Suetonius, used it with a shift of three (A becoming D when encrypting, and D becoming A when decrypting) to protect messages of military significance. While Caesar’s was the first recorded use of this scheme, other substitution ciphers are known to have been used earlier.(en.wikipedia.org/wiki/Caesar_cipher#cite_note-4)[[5]](en.wikipedia.org/wiki/Caesar_cipher#cite_note-5)"},"Information/Checksum":{"title":"Checksum","links":[],"tags":[],"content":"A checksum is a digital mechanism employed to validate the integrity of data during its transmission or storage. It functions akin to a unique fingerprint, generated through mathematical algorithms applied to the data itself. This fingerprint, or checksum, serves as a succinct representation of the data’s content.\nThe process typically involves summing or otherwise manipulating the individual bits or bytes of the data to derive a checksum value. This value is then appended to the data or transmitted alongside it.\nUpon receipt or retrieval of the data, the same checksum calculation process is repeated. The resulting checksum is then compared with the originally transmitted checksum. If the two checksums match, it indicates a high likelihood that the data has remained intact and unaltered during its journey.\nChecksums are widely utilized in various domains, including computer networking, file transfer protocols, and data storage systems, to ensure data reliability and detect potential errors or corruption. They serve as a crucial tool in safeguarding the accuracy and authenticity of digital information throughout its lifecycle.\nRead More"},"Information/Links":{"title":"Links","links":["Index"],"tags":[],"content":"As this is based on Obsidian, most things are connected by internal or external links."},"Information/Padding-Integers":{"title":"Padding Integers","links":[],"tags":[],"content":"Padding is the action of adding a character or an integer to a piece of data so that it reaches a certain length.\nFor example, if we have the value 5, but our system expect a value of a three digit length, we must pad our value with zeroes (0), so that it becomes 005.\nFor a more accurate description, visit en.wikipedia.org/wiki/Padding_(cryptography)#Zero_padding and en.wikipedia.org/wiki/Leading_zero."},"Information/REST":{"title":"REST","links":["Information/API"],"tags":[],"content":"REST, or Representational State Transfer, is an architectural style for designing networked applications, particularly web services. It provides a set of principles that guide how web services should be structured and how they should behave.\nAt its core, REST revolves around the concept of resources, which are the key entities that the web service deals with. These resources are identified by unique URIs (Uniform Resource Identifiers), much like how each webpage on the internet has its own URL.\nRESTful systems use standard HTTP methods (like GET, POST, PUT, DELETE) to perform operations on these resources. For example:\n\nGET is used to retrieve information about a resource.\nPOST is used to create a new resource.\nPUT is used to update an existing resource.\nDELETE is used to remove a resource.\n\nThis approach makes RESTful APIs easy to understand and use, as it aligns closely with how the web works. Clients interact with resources by sending HTTP requests to the appropriate URIs, and servers respond with the requested data or perform the requested actions.\nAnother important aspect of REST is its statelessness. Each request from a client to the server contains all the information necessary for the server to fulfill that request, without relying on any past interactions. This simplifies the design and implementation of RESTful systems and improves scalability and reliability.\nOverall, REST provides a simple and flexible architecture for building distributed systems and web services, making it widely adopted for designing APIs on the web. It emphasizes simplicity, scalability, and interoperability, allowing different systems to communicate and share resources effectively.\nGET Request\n\nUsage Example: Imagine you want to search for information about dogs on a pet adoption website.\nHow It Works Example: You type example.com/search into your browser’s address bar and hit Enter. Here, q=dogs is your request to the server for information about dogs.\nReceiving Information Example: The server then sends back a webpage showing you a list of dogs available for adoption.\n\nPOST Request\n\nUsage Example: Now, let’s say you want to create a new account on a website.\nHow It Works Example: You fill out a form with your username, email, and password, and then click the “Submit” button.\nSubmitting Information Example: When you click “Submit,” the information you entered (username, email, password) is sent to the server in the background using a POST request. The server receives this information, creates a new account for you, and sends back a confirmation message.\n\nIn summary, in a GET request, you ask for information by including parameters in the URL, like when you search for something online. In a POST request, you send information to the server, like when you fill out a form or make a purchase online. Both GET and POST requests are important for different actions you take on the internet."},"Information/Scryptorium":{"title":"Scryptorium","links":["Information/Padding-Integers","Information/Checksum"],"tags":[],"content":"Scryptorium is a book coordinate system, used to point towards words in specific locations in a book.\nScryptorium is based on Cartesian coordinates in a three-dimensional space, which, if you think about it, a book exactly is, where each axis will point you where to look.\nlo\nConsider the following diagram:\n\nIf you perform some spatial manipulation, and align the axis how they would appear in a two-dimensional space, the Z-axis would indicate depth, the X-axis would indicate the word in a line and the Y-axis would indicate the line on a page.\nThe Format\nScryptorium accounts for 999 being the maximum allowed value, so that all indices are left-padded with 0.\nScryptorium uses the following format: &lt;book short name&gt; &lt;coordinates&gt;&lt;checksum&gt;-&lt;word length&gt;, for example: Book 0080132507-9.\nChecksum\nScryptorium includes a Checksum value at the end of the coordinates that is a modulo 12 digit sum checksum.\nThe checksum, as the name suggests, is required to verify that the coordinates given are valid.\nWord Length\nIn addition to the checksum, Scryptorium also includes the word length for human validation to verify the word you found is the correct length."},"Information/Vigenère-cipher":{"title":"Vigenère cipher","links":["Information/Caesar-cipher"],"tags":[],"content":"\nThe Vigenère cipher is a method of encrypting alphabetic text by using a simple form of polyalphabetic substitution.\nIt was first described by Giovan Battista Bellaso in 1553 and later popularized by Blaise de Vigenère in the 19th century. In this cipher, a keyword is repeatedly used to shift the letters in the plaintext. You can read more about it here.\nI’m sure you’ve heard of (and perhaps even used? 😉) the Caesar cipher, which is actually quite similar to this one.\nEach letter in the keyword corresponds to a shift value, determining how much the corresponding letter in the plaintext is shifted. The Vigenère cipher offers a stronger level of security compared to simpler substitution ciphers because the same plaintext letter can be encrypted to different ciphertext letters at different positions in the text, making it more resistant to frequency analysis. However, it can still be broken with the right techniques, especially if the key length is known.\nExample\nSuppose we have the word “Hello”, and the key “Moon”. We need to superimpose the key, and repeat it since it is shorter, on our word:\nH E L L O\nM O O N M\n\nWe then use the alphabetic lookup table, according to the values above. We then get:\nH E L L O\nM O O N M\n---------\nT S Z Y A\n"},"Information/What-3-Words":{"title":"What 3 Words","links":[],"tags":[],"content":"What3Words (W3W) is a geocoding system that divides the world into a grid of 3m x 3m squares and assigns each square a unique combination of three words.\nThis allows for precise location identification using just three words, making it easier to communicate exact locations, especially in areas with poor addressing systems or in emergencies where traditional addresses may not be available. Users can simply input three words to pinpoint a location with accuracy, facilitating navigation and communication across various platforms and languages.\nWebsite"},"Phases/Phase-1":{"title":"Phase 1","links":["Information/Scryptorium","Phases/Phase-2"],"tags":[],"content":"We both like books. Books are good are great sources of information. Let’s see how good you are at finding this information.\nFor this task, you are going to use Scryptorium, something silly I worked on, to solve the following clues.\nOnce you have the answer, proceed to Phase 2.\nCookbook 008032010072-10\nNoDoctor 005025009086-5\nABCs 009017018091-5\nScriptorium 004024007103-8\nScriptorium 007028002118-4\nScriptorium 006022003125-6\nScriptorium 002019006134-4\nScriptorium 003016012148-8\nScriptorium 001021014154-8\nScriptorium 010027004169-6\n"},"Phases/Phase-2":{"title":"Phase 2","links":["Phases/Phase-1","Information/What-3-Words","Information/Vigenère-cipher","Phases/Phase-3"],"tags":[],"content":"You are going to need the solution from Phase 1 to continue, as we’re going to use a system called What 3 Words with the words you found in an ascending order of word length to find a city on Earth.\nThe solution is used as a key to password that was encrypted using a Vigenère cipher.\nThe password is:\nNmnqifp sanf xixtae,\nA dmp mnhmxwpq etqsbmda,\nSqkdmte aantxg wmpf.\n\nOnce you solve this little riddle, proceed to Phase 3."},"Phases/Phase-3":{"title":"Phase 3","links":["Phases/Phase-4"],"tags":[],"content":"You should now possess a useful little device, which I’m sure you’ll correctly identify as a ultraviolet flashlight. It is very useful for curing, photography among other things, and it’s very useful in Forensics.\nUnleash your inner forensic specialist, and find the clue. I’m quite certain you had some notes on this.\nOnce you’re done, proceed to Phase 4."},"Phases/Phase-4":{"title":"Phase 4","links":[],"tags":[],"content":"QR Codes are very useful. Especially when they are intact.\nThis will be your clue for this phase."},"Phases/Phase-5":{"title":"Phase 5","links":["Phases/Phase-4","Information/API","Information/REST","Information/Basic-Auth","Information/Base-16","Information/ASCII"],"tags":[],"content":"Nicely done! Completing Phase 4 should’ve yielded a URL, but you’ll quickly notice that it’s not something you can just open with your favorite web browser.\nTime to learn a bit about API and REST and Basic Auth as these will be useful for this phase.\nThe password you should use:\n77686973706572\n\n\n\n                  \n                  Important\n                  \n                \nAlthough it might be worthwhile to note that this is the Base 16 denomination of the ASCII password.\n\n\n\n                  \n                  Hint\n                  \n                \nIn a gist, you need to try a GET Request on the resource you found, and continue from there.\n"},"Phases/Phase-6":{"title":"Phase 6","links":["Information/Vigenère-cipher","Information/Base-64","Phases/Phase-5","Phases/Phase-7"],"tags":[],"content":"Now that you have the password, we’re gonna need it to program something (together, of course). It’ll be fun!\nWe will need to program the solution, because doing this manually, while possible, will most likely drive you crazy. Code makes this simple.\n\nIn this very long string, a Vigenère cipher encrypted password (that was then Base 64 encoded), was broken apart by characters and spaced around with random characters from the Base64 character set (a-z, A-Z, 0-9, =, /). The spacing is determined by the digit sum of your birthday (for example, if the digit sum is 4 then the hiding letters would be ---A---B---C---= where each - is a random letter).\nYou already have the password from Phase 5, and I do believe you know when your birthday is.\nYour solution should begin with fuzzy:.\nOnce you solve this, proceed to Phase 7. Good luck!\neozvLPdWz7XKUFfxmlFMsZ=ZjzOEceA35ZZZnnPOjqEnXVPGbepmzQcU73z8EgpO=Vnzbg6=CsPjr8=2jnT5OXm6PyIYggvvxWr77HgwsBULpeuSJ0m6ee3uvW3ClithgzdnpbFzYzM4T9iDCv4/J96MHkyYprSZGdDcyHJopNysGv96RNiSET=BXtJFpwZjFy/xfeKD=vXL7SJ1hXyDKQYMB42DYrgxY6AVGuj8sS0XtJXjRhq2Oq8zYJd6tIvMV7V21BwWZjXQtoLQj9hh2lEbULR/hbsu97fYH51/yAfh7SnV7lJHPClvT9oqaY6MG2ou8UOWAYzqU4WNhBcsTcCFFFqd6XY5sRWUFx69gEtgN4VaWlxfGWubnhPtTBMEMLKByJ6BWunXpOWI=O/ZTrXJeBn57Du=rg7NlTOUN2Fbv7FSe3G5oabxoPrNX5EC=OVQNcezRHrQcMQD/OngHeWwLYbev9YZ6GGkLizW=LA7teMB1yPLTmFduZefSoiJhqCR4jbC2l6cd7tSBPJ1lSfw8Phfm9cYAla8FZfO=rgf89feGv1ugIQ5yqhTixmmju6yR5y4o79uFzjhSAO=WjgmCBWMnY0NmhKqa0Vwt1x7nuXur5imjEIe=6SVmTCIeDBYhXtmBUj18i6Ov/FnPwAPB3WHUW=Jz/EBK=d79ViojEeAbpzDqal9baVMpieFCsBOrMatgepBaJ/LV6P4zMLVq==MIi8RMAgNCWEiVxJ3f=eQhhIXDpHY/qrJXYfoDNjReEyZMXj4rVujmaJSHXzaUTbbfpaJNtQEdBlrwgYyzcGPKPU37rn=O9VqhMOapl=USACdqzcLYHRHYptOHvaJQVETPzXcQENY3L/uBZuhVqAD4P=bJOdy7ZDIl5fHKbec=ZNQ31viTgi1M6SZ3ocYRRUkPYCXIngCnIdrvsrQRGvp6UmwWhMbGwwhD3JL=1PX0Kv4=yxxmr9J86xrQ0CXtB6=IMWdoBlUdH8AAeQxxqjR=H4VFpXtzlKMAVoB/l07rPh=th4Y=LGVW8QWqcgAGtJ8iLJpHv1c0e0=3gL9T0ssZlLUcSW59RyHRLJK=5V93PxtjXMXCuG7cWHdMtddMYy7OExadgpJhBfZ1lOUNoj7IU0B4JV=\n\n\n[!hint 1]-\nThe digit sum of 120488\n\n\n[!hint 2]-\nx8Vlv9Yx12FRe00NuE3sZqECfE81XiIx\n"},"Phases/Phase-7":{"title":"Phase 7","links":["Information/Vigenère-cipher"],"tags":[],"content":"Thank you for playing!\nFor your (small) prize, only keep the lowercase letters and use them as a key for yet another Vigenère cipher used in your birthday card!"},"START-HERE":{"title":"START HERE","links":["Information/Links","Phases/Phase-1"],"tags":[],"content":"\nWelcome to Vesper.\nThere are Links for most of the information that you will require. If you’re stuck, ask.\nHave fun, and good luck!\nBegin."},"index":{"title":"index","links":["Information/Links","Phases/Phase-1"],"tags":[],"content":"\nWelcome to Vesper.\nThere are Links for most of the information that you will require. If you’re stuck, ask.\nHave fun, and good luck!\nBegin."}}